$date
	Sat Mar  9 10:44:48 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module input_module_tb $end
$var wire 32 ! data_out [31:0] $end
$var wire 3 " vc_select [2:0] $end
$var wire 1 # input_read $end
$var reg 1 $ clk $end
$var reg 32 % data_in [31:0] $end
$var reg 1 & input_empty $end
$var reg 1 ' read_en $end
$var reg 1 ( reset $end
$scope module im $end
$var wire 1 ) buffer_empty $end
$var wire 1 $ clk $end
$var wire 32 * data_in [31:0] $end
$var wire 32 + data_out [31:0] $end
$var wire 1 & input_empty $end
$var wire 1 ' read_en $end
$var wire 1 ( reset $end
$var wire 1 , write_en_W $end
$var wire 1 - write_en_S $end
$var wire 1 . write_en_N $end
$var wire 1 / write_en_L $end
$var wire 1 0 write_en_E $end
$var wire 1 1 write_en $end
$var wire 3 2 vc_select [2:0] $end
$var wire 3 3 rr_select [2:0] $end
$var wire 1 4 read_en_W $end
$var wire 1 5 read_en_S $end
$var wire 1 6 read_en_N $end
$var wire 1 7 read_en_L $end
$var wire 1 8 read_en_E $end
$var wire 5 9 read_empty [4:0] $end
$var wire 5 : ocup_W [4:0] $end
$var wire 5 ; ocup_S [4:0] $end
$var wire 5 < ocup_N [4:0] $end
$var wire 5 = ocup_L [4:0] $end
$var wire 5 > ocup_E [4:0] $end
$var wire 1 # input_read $end
$var wire 1 ? full_W $end
$var wire 1 @ full_S $end
$var wire 1 A full_N $end
$var wire 1 B full_L $end
$var wire 1 C full_E $end
$var wire 1 D error_W $end
$var wire 1 E error_S $end
$var wire 1 F error_N $end
$var wire 1 G error_L $end
$var wire 1 H error_E $end
$var wire 1 I empty_W $end
$var wire 1 J empty_S $end
$var wire 1 K empty_N $end
$var wire 1 L empty_L $end
$var wire 1 M empty_E $end
$var wire 32 N data_W [31:0] $end
$var wire 32 O data_S [31:0] $end
$var wire 32 P data_N [31:0] $end
$var wire 32 Q data_L [31:0] $end
$var wire 32 R data_E [31:0] $end
$scope module arb $end
$var wire 1 $ clk $end
$var wire 5 S request [4:0] $end
$var wire 1 ( reset $end
$var reg 3 T grant [2:0] $end
$var reg 3 U next_state [2:0] $end
$var reg 3 V state [2:0] $end
$upscope $end
$scope module controller $end
$var wire 1 ) buffer_empty $end
$var wire 1 $ clk $end
$var wire 1 & input_empty $end
$var wire 1 ( reset $end
$var reg 1 # input_read $end
$upscope $end
$scope module ir $end
$var wire 1 $ clk $end
$var wire 32 W data_in [31:0] $end
$var wire 1 ( reset $end
$var wire 8 X dest_y [7:0] $end
$var wire 8 Y dest_x [7:0] $end
$var reg 3 Z vc_select [2:0] $end
$upscope $end
$scope module read_enable $end
$var wire 3 [ ctrl [2:0] $end
$var wire 1 ' data_input $end
$var wire 1 7 out4 $end
$var wire 1 4 out3 $end
$var wire 1 8 out2 $end
$var wire 1 5 out1 $end
$var wire 1 6 out0 $end
$upscope $end
$scope module vc_E $end
$var wire 1 $ clk $end
$var wire 32 \ data_in [31:0] $end
$var wire 1 8 read_en $end
$var wire 1 ( reset $end
$var wire 1 0 write_en $end
$var reg 32 ] data_out [31:0] $end
$var reg 1 M empty $end
$var reg 1 H error $end
$var reg 6 ^ fifo_ocup [5:0] $end
$var reg 1 C full $end
$var reg 6 _ next_read_ptr [5:0] $end
$var reg 6 ` next_write_ptr [5:0] $end
$var reg 5 a ocup [4:0] $end
$var reg 6 b read_ptr_ff [5:0] $end
$var reg 6 c write_ptr_ff [5:0] $end
$var integer 32 d i [31:0] $end
$upscope $end
$scope module vc_L $end
$var wire 1 $ clk $end
$var wire 32 e data_in [31:0] $end
$var wire 1 7 read_en $end
$var wire 1 ( reset $end
$var wire 1 / write_en $end
$var reg 32 f data_out [31:0] $end
$var reg 1 L empty $end
$var reg 1 G error $end
$var reg 6 g fifo_ocup [5:0] $end
$var reg 1 B full $end
$var reg 6 h next_read_ptr [5:0] $end
$var reg 6 i next_write_ptr [5:0] $end
$var reg 5 j ocup [4:0] $end
$var reg 6 k read_ptr_ff [5:0] $end
$var reg 6 l write_ptr_ff [5:0] $end
$var integer 32 m i [31:0] $end
$upscope $end
$scope module vc_N $end
$var wire 1 $ clk $end
$var wire 32 n data_in [31:0] $end
$var wire 1 6 read_en $end
$var wire 1 ( reset $end
$var wire 1 . write_en $end
$var reg 32 o data_out [31:0] $end
$var reg 1 K empty $end
$var reg 1 F error $end
$var reg 6 p fifo_ocup [5:0] $end
$var reg 1 A full $end
$var reg 6 q next_read_ptr [5:0] $end
$var reg 6 r next_write_ptr [5:0] $end
$var reg 5 s ocup [4:0] $end
$var reg 6 t read_ptr_ff [5:0] $end
$var reg 6 u write_ptr_ff [5:0] $end
$var integer 32 v i [31:0] $end
$upscope $end
$scope module vc_S $end
$var wire 1 $ clk $end
$var wire 32 w data_in [31:0] $end
$var wire 1 5 read_en $end
$var wire 1 ( reset $end
$var wire 1 - write_en $end
$var reg 32 x data_out [31:0] $end
$var reg 1 J empty $end
$var reg 1 E error $end
$var reg 6 y fifo_ocup [5:0] $end
$var reg 1 @ full $end
$var reg 6 z next_read_ptr [5:0] $end
$var reg 6 { next_write_ptr [5:0] $end
$var reg 5 | ocup [4:0] $end
$var reg 6 } read_ptr_ff [5:0] $end
$var reg 6 ~ write_ptr_ff [5:0] $end
$var integer 32 !" i [31:0] $end
$upscope $end
$scope module vc_W $end
$var wire 1 $ clk $end
$var wire 32 "" data_in [31:0] $end
$var wire 1 4 read_en $end
$var wire 1 ( reset $end
$var wire 1 , write_en $end
$var reg 32 #" data_out [31:0] $end
$var reg 1 I empty $end
$var reg 1 D error $end
$var reg 6 $" fifo_ocup [5:0] $end
$var reg 1 ? full $end
$var reg 6 %" next_read_ptr [5:0] $end
$var reg 6 &" next_write_ptr [5:0] $end
$var reg 5 '" ocup [4:0] $end
$var reg 6 (" read_ptr_ff [5:0] $end
$var reg 6 )" write_ptr_ff [5:0] $end
$var integer 32 *" i [31:0] $end
$upscope $end
$scope module write_enable $end
$var wire 3 +" ctrl [2:0] $end
$var wire 1 1 data_input $end
$var wire 1 / out4 $end
$var wire 1 , out3 $end
$var wire 1 0 out2 $end
$var wire 1 - out1 $end
$var wire 1 . out0 $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b111 +"
b100000 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
b0 ""
b100000 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b100000 v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b100000 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b100000 d
b0 c
b0 b
b0 a
b0 `
b0 _
b0 ^
b0 ]
b0 \
b111 [
b111 Z
b0 Y
b0 X
b0 W
b101 V
b101 U
b111 T
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
1M
1L
1K
1J
1I
0H
0G
0F
0E
0D
0C
0B
0A
0@
0?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
08
07
06
05
04
b111 3
b111 2
01
00
0/
0.
0-
0,
bz +
b0 *
1)
1(
0'
0&
b0 %
1$
1#
b111 "
bz !
$end
#5000
0$
#10000
b100000 m
b100000 *"
b100000 d
b100000 !"
b100000 v
1$
#15000
0$
#20000
b1 {
1-
11
0#
b1 Y
b10 X
b1 "
b1 2
b1 Z
b1 +"
1$
1&
b1000000100000000000000001 %
b1000000100000000000000001 *
b1000000100000000000000001 W
b1000000100000000000000001 \
b1000000100000000000000001 e
b1000000100000000000000001 n
b1000000100000000000000001 w
b1000000100000000000000001 ""
0(
#25000
0$
#30000
b1 U
b1 ;
b1 |
b1 y
b10 {
b1000000100000000000000001 O
b1000000100000000000000001 x
b10 9
b10 S
0J
b1 ~
1$
#35000
0$
#40000
b10 ;
b10 |
b10 y
b1 3
b1 T
b1 [
b10 ~
b1 V
b10 {
b1 &"
0-
1,
b11 "
b11 2
b11 Z
b11 +"
b0 Y
b1 X
1$
b10000000000000001 %
b10000000000000001 *
b10000000000000001 W
b10000000000000001 \
b10000000000000001 e
b10000000000000001 n
b10000000000000001 w
b10000000000000001 ""
#45000
0$
#50000
b11 U
b1 :
b1 '"
b1 $"
b10 &"
b10000000000000001 N
b10000000000000001 #"
b1010 9
b1010 S
0I
b1 )"
1$
#55000
0$
#60000
b1 %"
14
b10 :
b10 '"
b10 $"
b11 3
b11 T
b11 [
b10 )"
b11 V
b10 &"
0,
b0 z
01
05
1#
1$
1'
0&
#65000
0$
#70000
b1 :
b1 '"
b1 $"
b10 %"
b1 ("
1$
#75000
0$
#80000
b1 U
b0 :
b0 '"
b0 $"
1D
b0 N
b0 #"
b10 9
b10 S
1I
b10 ("
1$
#85000
0$
#90000
b1 z
0D
15
04
b1 3
b1 T
b1 [
b1 V
1$
#95000
0$
#100000
b1 ;
b1 |
b1 y
b10 z
b10000000000000001 O
b10000000000000001 x
b1 }
1$
#105000
0$
#110000
b101 U
b0 ;
b0 |
b0 y
1E
b0 O
b0 x
b0 9
b0 S
1J
b10 }
1$
#115000
0$
#120000
0E
05
b111 3
b111 T
b111 [
b101 V
1$
#125000
0$
#130000
1$
#135000
0$
#140000
1$
#145000
0$
#150000
1$
#155000
0$
#160000
1$
#165000
0$
#170000
1$
#175000
0$
#180000
1$
