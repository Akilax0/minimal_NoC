$date
	Mon Nov 27 11:29:08 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module ni_tb $end
$var wire 16 ! core_read_data [15:0] $end
$var reg 1 " clk $end
$var reg 1 # core_read_en $end
$var reg 16 $ core_write_addr [15:0] $end
$var reg 16 % core_write_data [15:0] $end
$var reg 1 & core_write_en $end
$var reg 1 ' reset $end
$var integer 32 ( i [31:0] $end
$scope module my_ni $end
$var wire 2 ) bresp [1:0] $end
$var wire 1 " clk $end
$var wire 1 # core_read_en $end
$var wire 16 * core_write_addr [15:0] $end
$var wire 16 + core_write_data [15:0] $end
$var wire 1 & core_write_en $end
$var wire 1 ' reset $end
$var wire 2 , rresp [1:0] $end
$var wire 1 - write_en $end
$var wire 32 . write_data [31:0] $end
$var wire 1 / wready $end
$var wire 1 0 rvalid $end
$var wire 1 1 read_en $end
$var wire 16 2 read_data [15:0] $end
$var wire 32 3 read64_data [31:0] $end
$var wire 6 4 ocup [5:0] $end
$var wire 1 5 full $end
$var wire 1 6 error $end
$var wire 1 7 empty $end
$var wire 16 8 core_read_data [15:0] $end
$var wire 1 9 bvalid $end
$var wire 1 : awready $end
$var wire 1 ; arready $end
$var reg 1 < arvalid $end
$var reg 1 = awvalid $end
$var reg 1 > bready $end
$var reg 1 ? rready $end
$var reg 1 @ wvalid $end
$scope module slave $end
$var wire 1 " aclk $end
$var wire 32 A araddr [31:0] $end
$var wire 1 B arestn $end
$var wire 1 < arvalid $end
$var wire 16 C awaddr [15:0] $end
$var wire 1 = awvalid $end
$var wire 1 > bready $end
$var wire 2 D bresp [1:0] $end
$var wire 16 E rdata [15:0] $end
$var wire 16 F read_data [15:0] $end
$var wire 1 1 read_en $end
$var wire 1 ? rready $end
$var wire 2 G rresp [1:0] $end
$var wire 16 H wdata [15:0] $end
$var wire 1 / wready $end
$var wire 1 - write_en $end
$var wire 1 @ wvalid $end
$var wire 32 I write_data [31:0] $end
$var wire 1 J reset $end
$var wire 1 5 full $end
$var wire 1 7 empty $end
$var reg 1 ; arready $end
$var reg 1 : awready $end
$var reg 1 9 bvalid $end
$var reg 1 0 rvalid $end
$upscope $end
$scope module write_fifo $end
$var wire 1 " clk $end
$var wire 32 K data_in [31:0] $end
$var wire 1 1 read_en $end
$var wire 1 ' reset $end
$var wire 1 - write_en $end
$var reg 32 L data_out [31:0] $end
$var reg 1 7 empty $end
$var reg 1 6 error $end
$var reg 6 M fifo_ocup [5:0] $end
$var reg 1 5 full $end
$var reg 6 N next_read_ptr [5:0] $end
$var reg 6 O next_write_ptr [5:0] $end
$var reg 6 P ocup [5:0] $end
$var reg 6 Q read_ptr_ff [5:0] $end
$var reg 6 R write_ptr_ff [5:0] $end
$var integer 32 S i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ni_tb $end
$scope module my_ni $end
$scope module write_fifo $end
$var reg 32 T \fifo_ff[0] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ni_tb $end
$scope module my_ni $end
$scope module write_fifo $end
$var reg 32 U \fifo_ff[1] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ni_tb $end
$scope module my_ni $end
$scope module write_fifo $end
$var reg 32 V \fifo_ff[2] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ni_tb $end
$scope module my_ni $end
$scope module write_fifo $end
$var reg 32 W \fifo_ff[3] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ni_tb $end
$scope module my_ni $end
$scope module write_fifo $end
$var reg 32 X \fifo_ff[4] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ni_tb $end
$scope module my_ni $end
$scope module write_fifo $end
$var reg 32 Y \fifo_ff[5] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ni_tb $end
$scope module my_ni $end
$scope module write_fifo $end
$var reg 32 Z \fifo_ff[6] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ni_tb $end
$scope module my_ni $end
$scope module write_fifo $end
$var reg 32 [ \fifo_ff[7] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ni_tb $end
$scope module my_ni $end
$scope module write_fifo $end
$var reg 32 \ \fifo_ff[8] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ni_tb $end
$scope module my_ni $end
$scope module write_fifo $end
$var reg 32 ] \fifo_ff[9] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ni_tb $end
$scope module my_ni $end
$scope module write_fifo $end
$var reg 32 ^ \fifo_ff[10] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ni_tb $end
$scope module my_ni $end
$scope module write_fifo $end
$var reg 32 _ \fifo_ff[11] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ni_tb $end
$scope module my_ni $end
$scope module write_fifo $end
$var reg 32 ` \fifo_ff[12] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ni_tb $end
$scope module my_ni $end
$scope module write_fifo $end
$var reg 32 a \fifo_ff[13] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ni_tb $end
$scope module my_ni $end
$scope module write_fifo $end
$var reg 32 b \fifo_ff[14] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ni_tb $end
$scope module my_ni $end
$scope module write_fifo $end
$var reg 32 c \fifo_ff[15] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ni_tb $end
$scope module my_ni $end
$scope module write_fifo $end
$var reg 32 d \fifo_ff[16] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ni_tb $end
$scope module my_ni $end
$scope module write_fifo $end
$var reg 32 e \fifo_ff[17] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ni_tb $end
$scope module my_ni $end
$scope module write_fifo $end
$var reg 32 f \fifo_ff[18] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ni_tb $end
$scope module my_ni $end
$scope module write_fifo $end
$var reg 32 g \fifo_ff[19] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ni_tb $end
$scope module my_ni $end
$scope module write_fifo $end
$var reg 32 h \fifo_ff[20] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ni_tb $end
$scope module my_ni $end
$scope module write_fifo $end
$var reg 32 i \fifo_ff[21] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ni_tb $end
$scope module my_ni $end
$scope module write_fifo $end
$var reg 32 j \fifo_ff[22] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ni_tb $end
$scope module my_ni $end
$scope module write_fifo $end
$var reg 32 k \fifo_ff[23] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ni_tb $end
$scope module my_ni $end
$scope module write_fifo $end
$var reg 32 l \fifo_ff[24] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ni_tb $end
$scope module my_ni $end
$scope module write_fifo $end
$var reg 32 m \fifo_ff[25] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ni_tb $end
$scope module my_ni $end
$scope module write_fifo $end
$var reg 32 n \fifo_ff[26] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ni_tb $end
$scope module my_ni $end
$scope module write_fifo $end
$var reg 32 o \fifo_ff[27] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ni_tb $end
$scope module my_ni $end
$scope module write_fifo $end
$var reg 32 p \fifo_ff[28] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ni_tb $end
$scope module my_ni $end
$scope module write_fifo $end
$var reg 32 q \fifo_ff[29] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ni_tb $end
$scope module my_ni $end
$scope module write_fifo $end
$var reg 32 r \fifo_ff[30] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ni_tb $end
$scope module my_ni $end
$scope module write_fifo $end
$var reg 32 s \fifo_ff[31] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
b0 ^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b0 T
b100000 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
1J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
0B
b0 A
0@
0?
0>
0=
0<
0;
0:
09
b0 8
17
06
05
b0 4
b0 3
b0 2
01
00
0/
b0 .
0-
b0 ,
b0 +
b0 *
b0 )
b100000 (
1'
0&
b0 %
b0 $
0#
1"
b0 !
$end
#5000
0"
#10000
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
b0 ^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b0 T
b100000 S
1"
#15000
0"
#20000
1/
1:
1>
1@
1=
1"
b1010101010101010 %
b1010101010101010 +
b1010101010101010 H
b10100101101001011010101010101010 .
b10100101101001011010101010101010 I
b10100101101001011010101010101010 K
b1010010110100101 $
b1010010110100101 *
b1010010110100101 C
1&
0J
1B
0'
#25000
0"
#30000
b1 O
0/
0:
1-
19
0@
0=
1"
#35000
0"
#40000
b1 4
b1 P
b1 M
07
0-
09
1;
b0 T
b1 R
1?
1<
1"
b0 %
b0 +
b0 H
b0 .
b0 I
b0 K
b0 $
b0 *
b0 C
1#
0&
#42000
0<
0>
#45000
0"
#50000
b1 N
11
10
0;
1<
1"
#55000
0"
#60000
b0 4
b0 P
b0 M
17
b0 O
b0 N
01
00
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
b0 ^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b0 T
b0 R
0?
0<
b100000 S
1"
0#
1J
0B
1'
#65000
0"
#70000
1"
0J
1B
0'
