$date
	Mon Nov 27 08:02:13 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module async_fifo_tb $end
$var wire 1 ! wfull $end
$var wire 1 " rempty $end
$var wire 32 # rdata [31:0] $end
$var reg 1 $ rclk $end
$var reg 1 % rinc $end
$var reg 1 & rrst_n $end
$var reg 1 ' wclk $end
$var reg 32 ( wdata [31:0] $end
$var reg 1 ) winc $end
$var reg 1 * wrst_n $end
$scope module my_fifo $end
$var wire 1 $ rclk $end
$var wire 1 % rinc $end
$var wire 1 & rrst_n $end
$var wire 1 ' wclk $end
$var wire 32 + wdata [31:0] $end
$var wire 1 ) winc $end
$var wire 1 * wrst_n $end
$var wire 6 , wq2_rptr [5:0] $end
$var wire 6 - wptr [5:0] $end
$var wire 1 ! wfull $end
$var wire 5 . waddr [4:0] $end
$var wire 6 / rq2_wptr [5:0] $end
$var wire 6 0 rptr [5:0] $end
$var wire 1 " rempty $end
$var wire 32 1 rdata [31:0] $end
$var wire 5 2 raddr [4:0] $end
$scope module fifomem $end
$var wire 32 3 rdata [31:0] $end
$var wire 1 ' wclk $end
$var wire 1 ) wclken $end
$var wire 32 4 wdata [31:0] $end
$var wire 1 ! wfull $end
$var wire 5 5 waddr [4:0] $end
$var wire 5 6 raddr [4:0] $end
$upscope $end
$scope module rptr_empty $end
$var wire 1 $ rclk $end
$var wire 6 7 rgraynext [5:0] $end
$var wire 1 % rinc $end
$var wire 1 & rrst_n $end
$var wire 6 8 rq2_wptr [5:0] $end
$var wire 1 9 rempty_val $end
$var wire 6 : rbinnext [5:0] $end
$var wire 5 ; raddr [4:0] $end
$var reg 6 < rbin [5:0] $end
$var reg 1 " rempty $end
$var reg 6 = rptr [5:0] $end
$upscope $end
$scope module sync_r2w $end
$var wire 6 > rptr [5:0] $end
$var wire 1 ' wclk $end
$var wire 1 * wrst_n $end
$var reg 6 ? wq1_rptr [5:0] $end
$var reg 6 @ wq2_rptr [5:0] $end
$upscope $end
$scope module sync_w2r $end
$var wire 1 $ rclk $end
$var wire 1 & rrst_n $end
$var wire 6 A wptr [5:0] $end
$var reg 6 B rq1_wptr [5:0] $end
$var reg 6 C rq2_wptr [5:0] $end
$upscope $end
$scope module wptr_full $end
$var wire 1 ' wclk $end
$var wire 6 D wgraynext [5:0] $end
$var wire 1 ) winc $end
$var wire 6 E wq2_rptr [5:0] $end
$var wire 1 * wrst_n $end
$var wire 1 F wfull_val $end
$var wire 6 G wbinnext [5:0] $end
$var wire 5 H waddr [4:0] $end
$var reg 6 I wbin [5:0] $end
$var reg 1 ! wfull $end
$var reg 6 J wptr [5:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 J
b0 I
b0 H
b0 G
0F
b0 E
b0 D
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
19
b0 8
b0 7
b0 6
b0 5
b0 4
bx 3
b0 2
bx 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
0*
0)
b0 (
1'
0&
0%
1$
bx #
1"
0!
$end
#5000
0'
#10000
1'
0$
#15000
0'
#20000
b1 .
b1 5
b1 H
b1011101110111011 #
b1011101110111011 1
b1011101110111011 3
b1 I
b11 D
b10 G
1'
1$
b1011101110111011 (
b1011101110111011 +
b1011101110111011 4
1)
1&
1*
#25000
0'
#30000
b10 .
b10 5
b10 H
b10 D
b11 G
b10 I
b11 -
b11 A
b11 J
1'
0$
#35000
0'
#40000
b11 .
b11 5
b11 H
b110 D
b100 G
b11 I
b10 -
b10 A
b10 J
b11 B
1'
1$
b10000000000000001 (
b10000000000000001 +
b10000000000000001 4
#45000
0'
#50000
b100 .
b100 5
b100 H
b111 D
b101 G
b100 I
b110 -
b110 A
b110 J
1'
0$
#55000
0'
#60000
b111 -
b111 A
b111 J
09
b11 /
b11 8
b11 C
b110 B
b110 D
b100 G
1'
1$
1%
0)
#65000
0'
#70000
b110 -
b110 A
b110 J
1'
0$
#75000
0'
#80000
b1 7
b1 :
b101 .
b101 5
b101 H
b101 I
b110 /
b110 8
b110 C
0"
b101 D
b110 G
1'
1$
b1000000001100110011001100 (
b1000000001100110011001100 +
b1000000001100110011001100 4
1)
#85000
0'
#90000
b110 .
b110 5
b110 H
b100 D
b111 G
b110 I
b101 -
b101 A
b101 J
1'
0$
#95000
0'
#100000
b1 2
b1 6
b1 ;
b11 7
b100 -
b100 A
b100 J
b10 :
b1 <
b1 0
b1 =
b1 >
b101 B
b101 D
b110 G
1'
1$
0)
#105000
0'
#110000
b101 -
b101 A
b101 J
b1 ?
1'
0$
#115000
0'
#120000
b10000000000000001 #
b10000000000000001 1
b10000000000000001 3
b10 2
b10 6
b10 ;
b10 7
b1 ,
b1 @
b1 E
b101 /
b101 8
b101 C
b11 :
b10 <
b11 0
b11 =
b11 >
1'
1$
#125000
0'
#130000
b11 ?
1'
0$
#135000
0'
#140000
b11 ,
b11 @
b11 E
b10 0
b10 =
b10 >
b11 7
b10 :
1'
1$
0%
#145000
0'
#150000
b10 ?
1'
0$
#155000
0'
#160000
b10 ,
b10 @
b10 E
b11 0
b11 =
b11 >
1'
1$
#165000
0'
#170000
b11 ?
1'
0$
#175000
0'
#180000
b11 ,
b11 @
b11 E
1'
1$
